// To create a database using SQLITE3
sqlite3 <dbname>;

// To create a table with three fields
CREATE TABLE contacts (name text, phone integer, email text);

// To insert records into table
INSERT INTO contacts (name, phone, email) VALUES("Deepanshu", 807986, "deepanshu@email.com");
INSERT INTO contacts VALUES("Deepanshu", 807986, "deepanshu@email.com");

// To query all records from table
SELECT * FROM contacts;

// To insert data in just specific fields
INSERT INTO contacts (name, phone) VALUES("deepanshu", 807986);

// To backup a database
.backup <backup file name>
.backup testBackup.db

// To restore the data from the backup db
.restore testBackup.db

// To update the fields of a specific record.
UPDATE contacts SET email="steve@email.com" WHERE name="Steve";

// To delete a specific from the table
DELETE FROM contacts WHERE name="Avril";

// Basic SQL commands
sqlite> .tables
contacts
sqlite> .schema
CREATE TABLE contacts (name text, phone integer, email text);
sqlite> .dump
PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE contacts (name text, phone integer, email text);
INSERT INTO contacts VALUES('Deepanshu',654780,'deepanshu@email.com');
INSERT INTO contacts VALUES('Divya',890145,'divya2email.com');
INSERT INTO contacts VALUES('Steve',672194,'steve@email.com');
COMMIT;
sqlite>

// To display the records in a specific order
SELECT * FROM artists ORDER BY name;
SELECT * FROM albums ORDER BY name COLLATE NOCASE;
SELECT * FROM albums ORDER BY name COLLATE NOCASE DESC;

// To display the records ORDER BY multiple columns
SELECT * FROM albums ORDER BY artist, name COLLATE NOCASE;
SELECT * FROM songs ORDER BY album, track COLLATE NOCASE;

// To join two tables
SELECT songs.track, songs.title, albums.name FROM songs JOIN albums on songs.album = albums._id COLLATE NOCASE;
